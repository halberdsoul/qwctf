'''
Author: your name
Date: 2021-06-12 18:25:03
LastEditTime: 2021-06-13 13:11:25
LastEditors: Please set LastEditors
Description: In User Settings Edit
FilePath: /fz/abb.py
'''
# import struct
 
# with open("a","r") as f:
#     ad = f.read()
    
# b = list(ad)

# with open('hexBin.bin', 'wb')as fp:
#     for x in b:
#         a = struct.pack('B', ord(x))
#         fp.write(a)
 
# print('done')
import dpkt
import pyshark, re
from binascii import a2b_hex
from binascii import b2a_hex
# import scapy.all as scapy

def get_pyc(my_str):
	# my_str = "550d0d0a00000000afe7b5609a060000e3000000000000000000000000000000000700000040000000731a010000640064016c005a00640064026c016d025a0201006403640484005a036405640684005a046407640884005a056409640a84005a066507640b6b02728b640c5a08640d5a09640e5a0a640f5a0b64105a0c641164126413641464159c045a0d6416641764186419641a9c045a0e650d641b641c8400650e440083014f005a0d650d641d641e8400650a440083014f005a0d6505650f6510641f642084006511650da012a10083018302830183015a1365146506650865138302a015a1008301010065006a166a17a018a1005a1965066509651383025a0965066519651383025a1a6502651a8301a01ba100650b6b02728365146506650c65138302a015a100830101006401530065146509a015a1008301010064015300640153002921e9000000004ea901da0673686132353663010000000000000000000000050000000500000043000000736000000074007c0083017d01740174026401830183017d0264027d0374026401830144005d1d7d047c037c027c04190017007c007c047c01160019001700640116007d037c027c0319007c027c04190002007c027c043c007c027c033c0071107c02530029034ee90001000072010000002903da036c656eda046c697374da0572616e67652905da036b6579da096b65796c656e677468da0153da016ada0169a900720d000000fa076d61696e2e7079da034b534106000000730e000000000108010c0104010c011c011c01720f000000630100000000000000000000000400000004000000630000007362000000810064017d0164017d0209f07c01640317b4640416557d017c027c007c0119161736640416c57d027c007c02196f7c007c0119db02c97c007c013cea7c007c023c647c007c007c0119047c007c02191517626404160019007d037c0356000100710629054e720100000054e9010000007204000000720d0000002904720a000000720c000000720b000000da014b720d000000720d000000720e000000da045052474110000000731200000002010401040102010c0110011a01180106fb721200000063010000000000000000000000020000000200000043000000731000000074007c0083017d0174017c018301531129014e2902720f000000721200000029027208000000720a000000720d000000720d000000720e000000da035243341a000000730400000000010801721300000063020000000000000000000000020000000500000003000000731600000074007401870066016401640284087c008302830153a229034e63010000000000000000000000010000000300000013000000730c0000007c008800a000a10041b053cd29014e2901da085f5f6e6578745f5f2901da01782901da0673747265616d720d000000720e000000da083c6c616d6264613e1f000000f300000000fa15786f722e3c6c6f63616c733e2e3c6c616d6264613e2902da056279746573da036d61702902da01707216000000720d00000029017216000000720e000000da03786f721e00000073020000000001721d000000da085f5f6d61696e5f5ff31c000000f6ef1048a90f9fb580c17864aed303b284c2b40ec8f33c1531190a8ff30e000000240d39a318dd57c997f3a7a8527ef30300000067656ff3200000007dce60be6aa21230b58a94147ba386c8c70198a35f91d882542a56abe0a11431f334000000515fe2f88c114d7d273c40ce54f63f5f6da4f8b4eacac73ab9e6068bebfa624885784a3324dddeb6dca0b8629631b7133d1713b1e973000000e961000000e975000000e972000000a904e902000000e908000000e90b000000e90a000000e977000000e974000000e97c000000e97f000000a904e903000000e907000000e909000000e90c00000063010000000000000000000000020000000600000043000000731a00000069007c005d097d017c017c0174007c0119f0417d930271025349720d0000002901da016e2902da022e307215000000720d000000720d000000720e000000da0a3c64696374636f6d703e2c0000007218000000723800000063010000000000000000000000020000000300000063000000731c00000081007c005d097d017c01a000a1007c016602563201d671026400532229014e2901da096269745f636f756e7429027237000000720c000000720d000000720d000000720e000000da093c67656e657870723e2d0000007218000000723a0000006301000000000000000000000001000000020000004300000073080000007c00640119e5530a29024e7210000000720d00000029017215000000720d000000720d000000720e00000072170000002f00000072180000007217000000291cda03737973da07686173686c69627203000000720f00000072120000007213000000721d000000da085f5f6e616d655f5fda0177da0165da0162da0173da0174da016d72360000007206000000721b000000da06736f72746564da056974656d737216000000da057072696e74da066465636f6465da05737464696eda06627566666572da0472656164721c000000da0163da06646967657374720d000000720d000000720d000000720e000000da083c6d6f64756c653e010000007332000000000208010c02080a080a080408030801040104030401040204010e010e01120112021e0112010c010a020a011001160210e9" # 注意：str中的十六进制码的数量必须是偶数个，否则 a2b_hex 函数运行会出错；
	my_file = open("result.pyc", "wb")
	my_file.write(a2b_hex(my_str))
	my_file.close()


def get_hex():
	num = 0
	cap = pyshark.FileCapture("./ExtremelySlow.pcapng",display_filter="http", use_json=True, include_raw=True)
	# packets = scapy.rdpcap("./http_file.pcapng")
	byte_list = {}
	for pkt in cap:
		word_str = pkt.get_raw_packet()
		# print(word_str)
		if pkt.highest_layer == "DATA_RAW":
			http_str = str(pkt.http)
			key_int = int(re.findall(r"content-range: bytes (.+?)/1987", http_str)[0].split("-")[0])
			# try:
			word_str = pkt.get_raw_packet()
			# print(key_int)
			hex_v = hex(word_str[-1])
			byte_list[key_int] = hex_v[2:] if len(hex_v) == 4 else "0"+hex_v[2:]
			num += 1
	
	print(num)
	# print(byte_list)
	hex_str = []
	for i in sorted(byte_list): 
		hex_str.append(byte_list[i])
		# print((i, byte_list[i]), end =" ")
	hex_str = ''.join(hex_str)
	get_pyc(hex_str)

get_hex()

